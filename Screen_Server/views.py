"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-–ø–∞–∫–µ—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
- –°–Ω–∏—Ñ—Ñ–∏–Ω–≥ UDP-–ø–∞–∫–µ—Ç–æ–≤ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Scapy)
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'moscow')
- –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ UDP-–∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ asyncio –∏ MoscowProtocol
- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö Django-—Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""


import threading
import logging
import asyncio


from django.http import HttpResponseRedirect

from scapy.all import sniff
from scapy.layers.inet import UDP
from scapy.packet import Raw

from .metro import *
from .moscow import SessionProtocolParser


logging.basicConfig(level=logging.DEBUG)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
LAST_PACKET_DATA = None           # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ UDP –ø–∞–∫–µ—Ç–∞ (–≤ hex)
MODULE_STATE = None               # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è (moscow –∏ —Ç.–ø.)
MOSCOW_PORT = 29789               # –ü–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ '–º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ' –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
MOSCOW_CLIENT_RUNNING = False     # –ó–∞–ø—É—â–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
_sniffing_started = False         # –ë—ã–ª –ª–∏ –∑–∞–ø—É—â–µ–Ω —Å–Ω–∏—Ñ—Ñ–µ—Ä

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UDP-—Å–µ—Ä–≤–µ—Ä–∞
def packet_callback(packet):
    """
    Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-–ø–∞–∫–µ—Ç–æ–≤.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–æ–¥—É–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç hex-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —ç—Ç–æ Raw-–ø–∞–∫–µ—Ç.

    :param packet: –æ–±—ä–µ–∫—Ç scapy.packet.Packet
    """
    global LAST_PACKET_DATA, MODULE_STATE
    try:
        if packet.haslayer(UDP):
            port = packet[UDP].sport
            if MODULE_STATE is None:
                if port == MOSCOW_PORT:
                    MODULE_STATE = 'moscow'
                    logging.info('–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –º–æ–¥—É–ª—å Moscow')
                    start_moscow_client()
                elif port != MOSCOW_PORT:
                    logging.info('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å')

            elif MODULE_STATE == 'moscow':
                if Raw in packet and isinstance(packet[Raw].load, bytes):
                    LAST_PACKET_DATA = packet[Raw].load.hex()

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞: {e}')


def start_sniffing():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Scapy-—Å–Ω–∏—Ñ—Ñ–∏–Ω–≥ UDP-–ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏ –ø–æ—Ä—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä: udp and port 29789
    """
    sniff(prn=packet_callback, iface="enp6s0", filter='udp and port 29789', store=0, monitor=True)

def start_sniffing_thread():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–Ω–∏—Ñ—Ñ–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.
    """
    global _sniffing_started
    if not _sniffing_started:
        _sniffing_started = True
        sniff_thread = threading.Thread(target=start_sniffing, daemon=True)
        sniff_thread.start()

def index(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–Ω–∏—Ñ—Ñ–∏–Ω–≥.
    –ï—Å–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ 'moscow', –¥–µ–ª–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ moscowBNT.
    """
    global MODULE_STATE
    if MODULE_STATE is None:
        start_sniffing_thread()
    elif MODULE_STATE == 'moscow':
        return HttpResponseRedirect('/moscowBNT/')
    return render(request, 'Screen_Server/index.html')

def moscowBNT(request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Moscow BNT (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è).
    """
    return render(request, 'Screen_Server/moscowBNT.html')



def get_module_state(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–æ–¥—É–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

    :return: JsonResponse –≤–∏–¥–∞ {"module_state": "moscow" –∏–ª–∏ None}
    """
    global MODULE_STATE
    return JsonResponse({'module_state': MODULE_STATE})


async def moscow_client():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π UDP-–∫–ª–∏–µ–Ω—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø–∞–∫–µ—Ç—ã,
    –∏—Å–ø–æ–ª—å–∑—É—è MoscowProtocol.
    """
    logging.info(f"–ó–∞–ø—É—Å–∫ UDP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ {MOSCOW_PORT}")
    loop = asyncio.get_event_loop()

    transport, protocol = await loop.create_datagram_endpoint(
        lambda: MoscowProtocol(),
        local_addr = ('0.0.0.0', MOSCOW_PORT),
    )

    try:
        while True:
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        transport.close()


def start_moscow_client():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ UDP-–∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.
    """
    global MOSCOW_CLIENT_RUNNING
    if MOSCOW_CLIENT_RUNNING:
        logging.warning("UDP-–∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return

    logging.info("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º UDP-–∫–ª–∏–µ–Ω—Ç...")
    MOSCOW_CLIENT_RUNNING = True
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(moscow_client())


class MoscowProtocol(asyncio.DatagramProtocol):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-–ø–∞–∫–µ—Ç–æ–≤ –æ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã:
    - connection_made: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    - datagram_received: –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö
    - error_received: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - connection_lost: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    """

    def connection_made(self, transport):
        self.transport = transport
        logging.info("UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def datagram_received(self, data, addr):
        # logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data.hex()}")
        hex_data = data.hex()
        parser = SessionProtocolParser(hex_data)
        parser.parse_packet()

    def send_diagnostics(selfself, message: bytes):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ UDP.

        :param message: –±–∞–π—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {message.hex()}")

    def error_received(self, error):
        logging.error(f"–û—à–∏–±–∫–∞ UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error}")

    def connection_lost(self, exc):
        logging.warning("UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
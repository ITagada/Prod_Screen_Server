import threading
import logging
import asyncio


from django.http import HttpResponseRedirect

from scapy.all import sniff
from scapy.layers.inet import UDP
from scapy.packet import Raw

from .metro import *
from .moscow import SessionProtocolParser


logging.basicConfig(level=logging.DEBUG)


LAST_PACKET_DATA = None
MODULE_STATE = None
MOSCOW_PORT = 29789
MOSCOW_CLIENT_RUNNING = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UDP-—Å–µ—Ä–≤–µ—Ä–∞
def packet_callback(packet):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Å–µ—Ç–µ–≤–æ–π –ø–∞–∫–µ—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ HEX-—Å—Ç—Ä–æ–∫—É
    –∏ –ø–∞—Ä—Å–∏—Ç —Å –ø–æ–º–æ—â—å—é SessionProtocolParser.
    """
    global LAST_PACKET_DATA, MODULE_STATE
    try:
        if packet.haslayer(UDP):
            port = packet[UDP].sport
            if MODULE_STATE is None:
                if port == MOSCOW_PORT:
                    MODULE_STATE = 'moscow'
                    logging.info('–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –º–æ–¥—É–ª—å Moscow')
                    start_moscow_client()
                elif port != MOSCOW_PORT:
                    logging.info('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π –º–æ–¥—É–ª—å')

            elif MODULE_STATE == 'moscow':
                if Raw in packet and isinstance(packet[Raw].load, bytes):
                    LAST_PACKET_DATA = packet[Raw].load.hex()

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞: {e}')


def start_sniffing():
    sniff(prn=packet_callback, iface="enp6s0", filter='udp and port 29789', store=0, monitor=True)

def start_sniffing_thread():
    sniff_thread = threading.Thread(target=start_sniffing, daemon=True)
    sniff_thread.start()

def index(request):
    global MODULE_STATE
    if MODULE_STATE is None:
        start_sniffing_thread()
    elif MODULE_STATE == 'moscow':
        return HttpResponseRedirect('/moscowBNT/')
    return render(request, 'Screen_Server/index.html')

def moscowBNT(request):
    return render(request, 'Screen_Server/moscowBNT.html')



def get_module_state(request):
    global MODULE_STATE
    return JsonResponse({'module_state': MODULE_STATE})


async def moscow_client():
    logging.info(f"–ó–∞–ø—É—Å–∫ UDP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ {MOSCOW_PORT}")
    loop = asyncio.get_event_loop()

    transport, protocol = await loop.create_datagram_endpoint(
        lambda: MoscowProtocol(),
        local_addr = ('0.0.0.0', MOSCOW_PORT),
    )

    try:
        while True:
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        transport.close()


def start_moscow_client():
    global MOSCOW_CLIENT_RUNNING
    if MOSCOW_CLIENT_RUNNING:
        logging.warning("UDP-–∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return

    logging.info("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º UDP-–∫–ª–∏–µ–Ω—Ç...")
    MOSCOW_CLIENT_RUNNING = True
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(moscow_client())


class MoscowProtocol(asyncio.DatagramProtocol):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö UDP-–ø–∞–∫–µ—Ç–æ–≤."""

    def connection_made(self, transport):
        self.transport = transport
        logging.info("UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def datagram_received(self, data, addr):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data.hex()}")
        hex_data = data.hex()
        parser = SessionProtocolParser(hex_data)
        parser.parse_packet()

    def send_diagnostics(selfself, message: bytes):
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {message.hex()}")

    def error_received(self, error):
        logging.error(f"–û—à–∏–±–∫–∞ UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {error}")

    def connection_lost(self, exc):
        logging.warning("UDP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")